{
  "Comment": "AFR Qualification Workflow",
  "StartAt": "Validate_device_config",
  "States": {
    "Validate_device_config": {
      "Type": "ValidateDeviceConfiguration",
      "Next": "Device_config_validation_passed_choice"
    },
    "Device_config_validation_passed_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.hasValidationErrors}} == true",
          "Next": "Fail"
        }
      ],
      "Default": "Version_checker_validation",
      "FallthroughOnError": true
    },
    "Version_checker_validation": {
      "Type": "ValidateTestGroup",
      "TestGroup": "FreeRTOSVersion",
      "Next": "Version_checker_validation_passed_choice",
      "Catch": [
        {
          "ErrorEquals": [
            "ValidationTaskError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Version_checker_validation_passed_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.hasValidationErrors}} == true",
          "Next": "Generate_validation_result"
        }
      ],
      "Default": "Version_checker",
      "FallthroughOnError": true
    },
    "Version_checker": {
      "Type": "RunTask",
      "TestGroup": "FreeRTOSVersion",
      "ResultVar": "version_passed",
      "Next": "Validate_parallel_testing",
      "Catch": [
        {
          "ErrorEquals": [
            "RunTaskError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Validate_parallel_testing": {
      "Type": "ValidateParallelTesting",
      "Next": "Single_group_choice",
      "ResultVar": "message",
      "Catch": [
        {
          "ErrorEquals": [
            "ValidationError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Single_group_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.singleGroupId}} == ''",
          "Next": "Version_checker_passed_choice"
        }
      ],
      "Default": "Check_FreeRTOSVersion_Group",
      "FallthroughOnError": true
    },
    "Check_FreeRTOSVersion_Group": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.singleGroupId}} == 'FreeRTOSVersion'",
          "Next": "Generate_report"
        }
      ],
      "Default": "Validate_single_group"
    },
    "Validate_single_group": {
      "Type": "ValidateTestGroup",
      "Next": "Validate_single_group_choice",
      "Catch": [
        {
          "ErrorEquals": [
            "ValidationTaskError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Validate_single_group_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.hasValidationErrors}} == true",
          "Next": "Generate_validation_result"
        }
      ],
      "Default": "Run_single_group",
      "FallthroughOnError": true
    },
    "Run_single_group": {
      "Type": "RunTask",
      "Next": "Generate_report",
      "Catch": [
        {
          "ErrorEquals": [
            "RunTaskError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Version_checker_passed_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.version_passed}} == true",
          "Next": "Qualification_choice"
        }
      ],
      "Default": "Add_product_features",
      "FallthroughOnError": true
    },
    "Qualification_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$pool.features[?(@.name == 'TCP/IP')].value[0]}} == 'no' || {{$pool.features[?(@.name == 'TLS')].value[0]}} == 'no'",
          "Next": "Not_qualified_log_message"
        }
      ],
      "Default": "SelectGroup"
    },
    "Not_qualified_log_message": {
      "Type": "LogMessage",
      "Next": "Fail",
      "Message": "Your board needs to have TCP/IP and TLS enabled in order to run qualification tests for Amazon FreeRTOS. Please check documentation for more information.",
      "Level": "Error"
    },
    "SelectGroup": {
      "Type": "Parallel",
      "Branches": [
        {
          "Comment": "check wifi and enqueue FullWiFi if Yes",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'WIFI')].value[0]}} == 'yes'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail"
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullWiFi"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "WiFi is enabled: Group FullWiFi is selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check TLS and enqueue FullTLS and FullPKCS11 if On-chip",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'TLS')].value[0]}} == 'on-chip'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail"
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullTLS",
                "FullPKCS11"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "TLS is on-chip: Groups FullTLS and FullPKCS11 are selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check TLS and enqueue FullTLS if offloaded",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'TLS')].value[0]}} == 'offloaded'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail"
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullTLS"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "TLS is offloaded: Group FullTLS is selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check OTA and enqueue FullOTA if Yes",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'OTA')].value[0]}} == 'yes'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail"
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullOTA"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "OTA is enabled: Group FullOTA is selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check BLE and enqueue FullBLE if Yes",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'BLE')].value[0]}} == 'yes'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullBLE"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "BLE is enabled: Group FullBLE is selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check TCP/IP and enqueue TCP/IP, FullSecureSockets, FullMQTT if On-chip",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'TCP/IP')].value[0]}} == 'on-chip'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail"
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullSecureSockets",
                "FullMQTT"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "TCP/IP is on-chip: Groups FullSecureSockets and FullMQTT are selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check TCP/IP and enqueue TCP/IP, FullSecureSockets, FullMQTT if Offloaded",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$pool.features[?(@.name == 'TCP/IP')].value[0]}} == 'offloaded'",
                  "Next": "Select"
                }
              ],
              "Default": "Fail"
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "FullSecureSockets",
                "FullMQTT"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "TCP/IP is offloaded: Groups FullSecureSockets and FullMQTT are selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "check cmakeConfiguration in userdata and enqueue CmakeBuildSystem if provided",
          "StartAt": "board_name_choice",
          "States": {
            "board_name_choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$userData.cmakeConfiguration.boardName}} != ''",
                  "Next": "Select"
                }
              ],
              "Default": "vendor_name_choice",
              "FallthroughOnError": true
            },
            "vendor_name_choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$userData.cmakeConfiguration.vendorName}} != ''",
                  "Next": "Select"
                }
              ],
              "Default": "afr_toolchain_path_choice",
              "FallthroughOnError": true
            },
            "afr_toolchain_path_choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$userData.cmakeConfiguration.afrToolchainPath}} != ''",
                  "Next": "Select"
                }
              ],
              "Default": "compiler_name_choice",
              "FallthroughOnError": true
            },
            "compiler_name_choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$userData.cmakeConfiguration.compilerName}} != ''",
                  "Next": "Select"
                }
              ],
              "Default": "cmake_toolchain_path_choice",
              "FallthroughOnError": true
            },
            "cmake_toolchain_path_choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$userData.cmakeConfiguration.cmakeToolchainPath}} != ''",
                  "Next": "Select"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "Select": {
              "Type": "SelectGroup",
              "TestGroups": [
                "CmakeBuildSystem"
              ],
              "Next": "Group_selected_log_message"
            },
            "Group_selected_log_message": {
              "Type": "LogMessage",
              "Next": "Succeed",
              "Message": "CmakeConfiguration is provided: Group CmakeBuildSystem is selected",
              "Level": "Info"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
      ],
      "Next": "Validate_test_group"
    },
    "Validate_test_group": {
      "Type": "Parallel",
      "Branches": [
        {
          "Comment": "run source integrity check validation",
          "StartAt": "integrityCheckValidation",
          "States": {
            "integrityCheckValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FreeRTOSIntegrity",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          },
          "Comment": "run wifi validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullWiFi_selected}} == true",
                  "Next": "WiFiValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "WiFiValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullWiFi",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run mqtt validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullMQTT_selected}} == true",
                  "Next": "MQTTValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "MQTTValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullMQTT",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run tls validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullTLS_selected}} == true",
                  "Next": "TLSValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "TLSValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullTLS",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run ota validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullOTA_selected}} == true",
                  "Next": "OTAValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "OTAValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullOTA",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run ble validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullBLE_selected}} == true",
                  "Next": "BLEValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "BLEValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullBLE",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run secure sockets validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullSecureSockets_selected}} == true",
                  "Next": "SecureSocketsValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "SecureSocketsValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullSecureSockets",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run pkcs11 validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullPKCS11_selected}} == true",
                  "Next": "PKCS11Validation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "PKCS11Validation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "FullPKCS11",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run cmake validation",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.CmakeBuildSystem_selected}} == true",
                  "Next": "CmakeValidation"
                }
              ],
              "Default": "Succeed",
              "FallthroughOnError": true
            },
            "CmakeValidation": {
              "Type": "ValidateTestGroup",
              "TestGroup": "CmakeBuildSystem",
              "Next": "Succeed"
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
      ],
      "Next": "Catch_execution_errors_validateTestGroup"
    },
    "Catch_execution_errors_validateTestGroup": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.hasExecutionErrors}} == true",
          "Next": "Fail"
        }
      ],
      "Default": "Validation_passed_choice",
      "FallthroughOnError": true
    },
    "Validation_passed_choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.hasValidationErrors}} == true",
          "Next": "Generate_validation_result"
        }
      ],
      "Default": "Start_suite",
      "FallthroughOnError": true
    },
    "Generate_validation_result": {
      "Type": "ValidateTestGroupResult",
      "Next": "Succeed",
      "Catch": [
        {
          "ErrorEquals": [
            "ReportError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Start_suite": {
      "Type": "Parallel",
      "Branches": [
        {
          "Comment": "run FreeRTOSIntegrity group",
          "StartAt": "FreeRTOSIntegrity",
          "States": {
            "FreeRTOSIntegrity": {
              "Type": "RunTask",
              "TestGroup": "FreeRTOSIntegrity",
              "ResultVar": "FreeRTOSIntegrity_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullWiFi group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullWiFi_selected}} == true",
                  "Next": "FullWiFi"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullWiFi": {
              "Type": "RunTask",
              "TestGroup": "FullWiFi",
              "ResultVar": "FullWiFi_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullTLS group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullTLS_selected}} == true",
                  "Next": "FullTLS"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullTLS": {
              "Type": "RunTask",
              "TestGroup": "FullTLS",
              "ResultVar": "FullTLS_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullOTA group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullOTA_selected}} == true",
                  "Next": "FullOTA"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullOTA": {
              "Type": "RunTask",
              "TestGroup": "FullOTA",
              "ResultVar": "FullOTA_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullBLE group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullBLE_selected}} == true",
                  "Next": "FullBLE"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullBLE": {
              "Type": "RunTask",
              "TestGroup": "FullBLE",
              "ResultVar": "FullBLE_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullSecureSockets group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullSecureSockets_selected}} == true",
                  "Next": "FullSecureSockets"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullSecureSockets": {
              "Type": "RunTask",
              "TestGroup": "FullSecureSockets",
              "ResultVar": "FullSecureSockets_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullPKCS11 group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullPKCS11_selected}} == true",
                  "Next": "FullPKCS11"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullPKCS11": {
              "Type": "RunTask",
              "TestGroup": "FullPKCS11",
              "ResultVar": "FullPKCS11_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run FullMQTT group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.FullMQTT_selected}} == true",
                  "Next": "FullMQTT"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "FullMQTT": {
              "Type": "RunTask",
              "TestGroup": "FullMQTT",
              "ResultVar": "FullMQTT_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        },
        {
          "Comment": "run Cmake group",
          "StartAt": "Choice",
          "States": {
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Expression": "{{$.CmakeBuildSystem_selected}} == true",
                  "Next": "CmakeBuildSystem"
                }
              ],
              "Default": "Fail",
              "FallthroughOnError": true
            },
            "CmakeBuildSystem": {
              "Type": "RunTask",
              "TestGroup": "CmakeBuildSystem",
              "ResultVar": "CmakeBuildSystem_passed",
              "Next": "Succeed",
              "Catch": [
                {
                  "ErrorEquals": [
                    "RunTaskError"
                  ],
                  "Next": "Fail"
                }
              ]
            },
            "Succeed": {
              "Type": "Succeed"
            },
            "Fail": {
              "Type": "Fail"
            }
          }
        }
      ],
      "Next": "Catch_execution_errors_start_suite"
    },
    "Catch_execution_errors_start_suite": {
      "Type": "Choice",
      "Choices": [
        {
          "Expression": "{{$.hasExecutionErrors}} == true",
          "Next": "Fail"
        }
      ],
      "Default": "Add_product_features",
      "FallthroughOnError": true
    },
    "Add_product_features": {
      "Type": "AddProductFeatures",
      "Features":[
        {
          "Feature": "ota",
          "Groups": ["FullOTA"],
          "IsRequired": false
        },
        {
          "Feature": "wifi",
          "Groups": ["FullWiFi"],
          "IsRequired": false
        },
        {
          "Feature": "ble",
          "Groups": ["FullBLE"],
          "IsRequired": false
        },
        {
          "Feature": "core-afreertos",
          "Groups": ["FreeRTOSIntegrity", "FullTLS", "FullSecureSockets", "FullPKCS11", "FullMQTT"],
          "IsRequired": true
        }
      ],
      "Next": "Catch_execution_errors_add_product_features"
    },
    "Catch_execution_errors_add_product_features": {
      "Type": "Choice",
      "Choices": [{
        "Expression": "{{$.hasExecutionErrors}} == true",
        "Next": "Fail"
      }],
      "Default": "Generate_report",
      "FallthroughOnError": true
    },
    "Generate_report": {
      "Type": "Report",
      "Next": "Succeed",
      "Catch": [
        {
          "ErrorEquals": [
            "ReportError"
          ],
          "Next": "Fail"
        }
      ]
    },
    "Succeed": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    }
  }
}